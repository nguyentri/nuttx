############################################################################
# boards/arm/ra8/fpb-ra8e1/scripts/Make.defs
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.  The
# ASF licenses this file to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance with the
# License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations
# under the License.
#
############################################################################

include $(TOPDIR)/.config
include $(TOPDIR)/tools/Config.mk
include $(TOPDIR)/arch/arm/src/armv8-m/Toolchain.defs

# Determine linker script based on build type
ifeq ($(CONFIG_BUILD_PROTECTED),y)
  LDSCRIPT = kernel-space.ld
else ifeq ($(CONFIG_BUILD_KERNEL),y)
  LDSCRIPT = kernel-space.ld
else
  LDSCRIPT = flash.ld
endif

ARCHSCRIPT = $(BOARD_DIR)$(DELIM)scripts$(DELIM)$(LDSCRIPT)

# ARM Cortex-M85 specific flags
ARCHPICFLAGS = -fpic -msingle-pic-base -mpic-register=r10

# RA8E1 specific compiler flags
ARCHCPUFLAGS = -mcpu=cortex-m85 -mthumb -mfpu=fpv5-d16 -mfloat-abi=hard

# Optimization and debugging
ifeq ($(CONFIG_DEBUG_CUSTOMOPT),y)
  ARCHOPTIMIZATION = $(CONFIG_DEBUG_OPTLEVEL)
else ifeq ($(CONFIG_DEBUG_FULLOPT),y)
  ARCHOPTIMIZATION = -Os
else
  ARCHOPTIMIZATION = -O2
endif

ifneq ($(CONFIG_DEBUG_NOOPT),y)
  ARCHOPTIMIZATION += -fno-strict-aliasing -fno-strength-reduce -fomit-frame-pointer
endif

# Stack protection and security features
ifeq ($(CONFIG_ARMV8M_STACKCHECK),y)
  ARCHCPUFLAGS += -finstrument-functions -ffixed-r10
endif

# Warning flags
ARCHCFLAGS = -fno-common -Wall -Wstrict-prototypes -Wshadow -Wundef
ARCHCXXFLAGS = -fno-common -Wall -Wshadow -Wundef -fno-exceptions -fcheck-new -fno-rtti

# Includes and defines
ARCHINCLUDES = -I. -isystem $(TOPDIR)$(DELIM)include
ARCHDEFINES =
ARCHXXINCLUDES = $(ARCHINCLUDES) -isystem $(TOPDIR)$(DELIM)include$(DELIM)cxx

# Compile flags
CFLAGS := $(ARCHCFLAGS) $(ARCHOPTIMIZATION) $(ARCHCPUFLAGS) $(ARCHINCLUDES) $(ARCHDEFINES) $(EXTRAFLAGS) -pipe
CPICFLAGS = $(ARCHPICFLAGS) $(CFLAGS)
CXXFLAGS := $(ARCHCXXFLAGS) $(ARCHOPTIMIZATION) $(ARCHCPUFLAGS) $(ARCHXXINCLUDES) $(ARCHDEFINES) $(EXTRAFLAGS) -pipe
CXXPICFLAGS = $(ARCHPICFLAGS) $(CXXFLAGS)
CPPFLAGS := $(ARCHINCLUDES) $(ARCHDEFINES) $(EXTRAFLAGS)
AFLAGS := $(CFLAGS) -D__ASSEMBLY__

# Linker flags
NXFLATLDFLAGS1 = -r -d -warn-common
NXFLATLDFLAGS2 = $(NXFLATLDFLAGS1) -T$(TOPDIR)/binfmt/libnxflat/gnu-nxflat-pcrel.ld -no-check-sections
LDNXFLATFLAGS = -e main -s 2048

# ELF module flags
LDELFFLAGS = -r -e main
ifeq ($(CONFIG_CYGWIN_WINTOOL),y)
  LDELFFLAGS += -T "${shell cygpath -w $(BOARD_DIR)$(DELIM)scripts$(DELIM)gnu-elf.ld}"
else
  LDELFFLAGS += -T $(BOARD_DIR)$(DELIM)scripts$(DELIM)gnu-elf.ld
endif

# Board-specific flags
HOSTCC = gcc
HOSTINCLUDES = -I.
HOSTCFLAGS = -Wall -Wstrict-prototypes -Wshadow -Wundef -g -pipe
HOSTLDFLAGS =
